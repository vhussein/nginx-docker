# Upstream Servers:
    #Defines two upstream blocks: backend_service1 and backend_service2.

#Map Directive:
    #The map directive reads the value of the Canary-Key HTTP header.
    #If the value is 0, requests are routed to backend_service1.
    #If the value is 1, requests are routed to backend_service2.
    #If the header is missing or has an unexpected value, it defaults to backend_service1.

#Proxy Configuration:
    #Routes all traffic to the selected upstream server using proxy_pass http://$backend_upstream.  
    
events {
    worker_connections 1024;
}

http {
    # Define upstream servers
    upstream backend_service1 {
        server service1:80;
    }

    upstream backend_service2 {
        server service2:80;
    }

    # Use the 'map' directive to select the upstream based on 'Canary-Key' header
    map $http_canary_key $backend_upstream {
        default backend_service1;  # Default to Service 1 if header is missing or invalid
        "0" backend_service1;
        "1" backend_service2;
    }

    server {
        listen 80;

        location / {
            # Route requests based on the mapped upstream server
            proxy_pass http://$backend_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}


